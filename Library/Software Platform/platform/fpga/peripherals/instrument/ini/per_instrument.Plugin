[Plugin]
Name=per_instrument
Implement=per_instrument
SourceDir=platform\fpga\peripherals\instrument\src
; Custom Instrument
HardwareID=CUSTOM_INSTRUMENT
Caption=Custom Instrument
Description=Fully customizable virtual instrument with base address, data width, input signals and output signals.
Bitmap=per_instrument.bmp
LargeBitmap=per_instrument_large.bmp
; Digital I/O
HardwareID1=DIGITAL_IO
Caption1=Digital I/O
Description1=Configuratble digital I/O with base address, data width, input signals and output signals.

[Available_If0]
Kind=ENVIRONMENT
Object=PROCESSOR
Condition=EQ
Value=SPROC

[Instance]
Require0=


[Instance_CustomGeneration0]
HeaderFile=instruments.h
SourceFile=instruments.c
GeneratorKind=CCC
GeneratorId=CUSTOM_INSTRUMENT

; NOTE: we use the CUSTOM_INSTRUMENT configurator to generate code for DIGITAL_IO components as well.
;       This works as long as they both use an unmodified common base code generator class.


[Instance_Option0]
Name=BASEADDRESS
GUIName=Base Address
Description=Hardware base address
Kind=UINT32
DefaultValue=0
Auto=True

[Instance_Option1]
Name=WishboneDataWidth
GUIName=Data Width
CodeName=datawidth
Description=Data width (in bits) of the component
Kind=ENUM
Enum0=8
Enum1=16
Enum2=32
EnumDescription0=8 bit data width
EnumDescription1=16 bit data width
EnumDescription2=32 bit data width
DefaultValue=8
Auto=True

[Instance_Option2]
Name=InputSignals
GUIName=Input Signals
Description=The input signals of the component. The input signal names entered must be separated by commas (eg. IN1, IN2).
Kind=STRINGS
DefaultValue=
Auto=True

[Instance_Option3]
Name=OutputSignals
GUIName=Output Signals
Description=The output signals of the component. The output signal names entered must be separated by commas (eg. OUT1, OUT2).
Kind=STRINGS
DefaultValue=
Auto=True
